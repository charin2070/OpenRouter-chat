'use client';

import React, { useState, useCallback, useEffect } from 'react';
import { AiProviderDropdown } from './chat/ai-provider-dropdown';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Slider } from '@/components/ui/slider';

import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import Modal from '@/components/ui/modal';
import { 
  Settings, 
  Bot, 
  Palette, 
  Globe, 
  Shield, 
  Zap, 
  Moon, 
  Sun, 
  Volume2, 
  Bell,
  Download,
  Upload,
  Trash2,
  RefreshCw,
  Save,
  X
} from 'lucide-react';
import { AIProvider } from '@/lib/types';
import { createClient } from '@/lib/supabase/client';

interface LocalSettingsProps {
  isOpen: boolean;
  onClose: () => void;
}

interface SettingsState {
  // AI Settings
  selectedProvider: AIProvider;
  temperature: number;
  maxTokens: number;
  systemPrompt: string;
  
  // UI Settings
  theme: 'light' | 'dark' | 'auto';
  language: 'ru' | 'en';
  fontSize: 'small' | 'medium' | 'large';
  compactMode: boolean;
  
  // Notifications
  soundEnabled: boolean;
  desktopNotifications: boolean;
  emailNotifications: boolean;
  
  // Privacy & Security
  saveHistory: boolean;
  encryptData: boolean;
  autoLogout: number;
  
  // Performance
  streamingEnabled: boolean;
  cacheEnabled: boolean;
  preloadModels: boolean;
}

export function LocalSettings({ isOpen, onClose }: LocalSettingsProps) {
  const [settings, setSettings] = useState<SettingsState>({
    selectedProvider: 'google-gemma',
    temperature: 0.7,
    maxTokens: 2048,
    systemPrompt: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.',
    theme: 'auto',
    language: 'ru',
    fontSize: 'medium',
    compactMode: false,
    soundEnabled: true,
    desktopNotifications: true,
    emailNotifications: false,
    saveHistory: true,
    encryptData: true,
    autoLogout: 30,
    streamingEnabled: true,
    cacheEnabled: true,
    preloadModels: false
  });

  const [hasChanges, setHasChanges] = useState(false);
  const [activeTab, setActiveTab] = useState('ai');

  const updateSetting = useCallback(<K extends keyof SettingsState>(
    key: K, 
    value: SettingsState[K]
  ) => {
    setSettings(prev => ({ ...prev, [key]: value }));
    setHasChanges(true);
  }, []);

  const handleProviderChange = useCallback((provider: AIProvider) => {
    updateSetting('selectedProvider', provider);
  }, [updateSetting]);

  const handleSave = useCallback(async () => {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      console.log('Saving settings:', settings);
      setHasChanges(false);
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    } catch (error) {
      console.error('Error saving settings:', error);
    }
  }, [settings]);

  const handleReset = useCallback(() => {
    setSettings({
      selectedProvider: 'google-gemma',
      temperature: 0.7,
      maxTokens: 2048,
      systemPrompt: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.',
      theme: 'auto',
      language: 'ru',
      fontSize: 'medium',
      compactMode: false,
      soundEnabled: true,
      desktopNotifications: true,
      emailNotifications: false,
      saveHistory: true,
      encryptData: true,
      autoLogout: 30,
      streamingEnabled: true,
      cacheEnabled: true,
      preloadModels: false
    });
    setHasChanges(true);
  }, []);

  const handleClose = useCallback(() => {
    if (hasChanges) {
      const confirmClose = window.confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?');
      if (!confirmClose) return;
    }
    onClose();
  }, [hasChanges, onClose]);

  return (
    <Modal isOpen={isOpen} onClose={handleClose}>
      <Modal.Header>
        <div className="flex items-center gap-3">
          <div className="p-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg">
            <Settings className="w-5 h-5 text-white" />
          </div>
          <div>
            <Modal.Title>
              <span className="text-xl font-semibold bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent">
                üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (NEW)
              </span>
            </Modal.Title>
            <p className="text-sm text-gray-500 mt-1">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–≥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          {hasChanges && (
            <Badge variant="secondary" className="animate-pulse">
              –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </Badge>
          )}
          <Button variant="ghost" size="sm" onClick={handleClose}>
            <X className="w-4 h-4" />
          </Button>
        </div>
      </Modal.Header>
      
      <Modal.Body>
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-4 mb-6">
            <TabsTrigger value="ai" className="flex items-center gap-2">
              <Bot className="w-4 h-4" />
              <span className="hidden sm:inline">AI</span>
            </TabsTrigger>
            <TabsTrigger value="interface" className="flex items-center gap-2">
              <Palette className="w-4 h-4" />
              <span className="hidden sm:inline">–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</span>
            </TabsTrigger>
            <TabsTrigger value="notifications" className="flex items-center gap-2">
              <Bell className="w-4 h-4" />
              <span className="hidden sm:inline">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
            </TabsTrigger>
            <TabsTrigger value="privacy" className="flex items-center gap-2">
              <Shield className="w-4 h-4" />
              <span className="hidden sm:inline">–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</span>
            </TabsTrigger>
          </TabsList>

          {/* AI Settings Tab */}
          <TabsContent value="ai" className="space-y-6 animate-in fade-in-0 duration-300">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bot className="w-5 h-5" />
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò
                </CardTitle>
                <CardDescription>
                  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label className="text-sm font-medium">AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä</Label>
                  <AiProviderDropdown
                    selectedProvider={settings.selectedProvider}
                    onProviderChange={handleProviderChange}
                    showStatus={true}
                    compact={false}
                  />
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label className="text-sm font-medium flex items-center justify-between">
                      –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                      <span className="text-xs text-gray-500">{settings.temperature}</span>
                    </Label>
                    <Slider
                      value={[settings.temperature]}
                      onValueChange={([value]) => updateSetting('temperature', value)}
                      max={2}
                      min={0}
                      step={0.1}
                      className="w-full"
                    />
                    <p className="text-xs text-gray-500">
                      –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤. –ù–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –≤—ã—Å–æ–∫–∏–µ - –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ.
                    </p>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤</Label>
                    <Input
                      type="number"
                      value={settings.maxTokens}
                      onChange={(e) => updateSetting('maxTokens', parseInt(e.target.value) || 2048)}
                      min={100}
                      max={8192}
                    />
                    <p className="text-xs text-gray-500">
                      –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò. –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ = –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
                    </p>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç</Label>
                    <Textarea
                      value={settings.systemPrompt}
                      onChange={(e) => updateSetting('systemPrompt', e.target.value)}
                      rows={4}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò..."
                    />
                    <p className="text-xs text-gray-500">
                      –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Interface Settings Tab */}
          <TabsContent value="interface" className="space-y-6 animate-in fade-in-0 duration-300">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Palette className="w-5 h-5" />
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                </CardTitle>
                <CardDescription>
                  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</Label>
                    <select 
                      value={settings.theme} 
                      onChange={(e) => updateSetting('theme', e.target.value as 'light' | 'dark' | 'auto')}
                      className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
                    >
                      <option value="light">‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è</option>
                      <option value="dark">üåô –¢—ë–º–Ω–∞—è</option>
                      <option value="auto">üåç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</option>
                    </select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</Label>
                    <select 
                      value={settings.language} 
                      onChange={(e) => updateSetting('language', e.target.value as 'ru' | 'en')}
                      className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
                    >
                      <option value="ru">üá∑üá∫ –†—É—Å—Å–∫–∏–π</option>
                      <option value="en">üá∫üá∏ English</option>
                    </select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</Label>
                    <select 
                      value={settings.fontSize} 
                      onChange={(e) => updateSetting('fontSize', e.target.value as 'small' | 'medium' | 'large')}
                      className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
                    >
                      <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                      <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                      <option value="large">–ë–æ–ª—å—à–æ–π</option>
                    </select>
                  </div>
                </div>
                
                <Separator />
                
                <div className="flex items-center justify-between">
                  <div className="space-y-1">
                    <Label className="text-sm font-medium">–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º</Label>
                    <p className="text-xs text-gray-500">–£–º–µ–Ω—å—à–∞–µ—Ç –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤</p>
                  </div>
                  <Switch
                    checked={settings.compactMode}
                    onCheckedChange={(checked) => updateSetting('compactMode', checked)}
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Notifications Tab */}
          <TabsContent value="notifications" className="space-y-6 animate-in fade-in-0 duration-300">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bell className="w-5 h-5" />
                  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                </CardTitle>
                <CardDescription>
                  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <Label className="text-sm font-medium flex items-center gap-2">
                        <Volume2 className="w-4 h-4" />
                        –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                      </Label>
                      <p className="text-xs text-gray-500">–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞</p>
                    </div>
                    <Switch
                      checked={settings.soundEnabled}
                      onCheckedChange={(checked) => updateSetting('soundEnabled', checked)}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <Label className="text-sm font-medium">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ</Label>
                      <p className="text-xs text-gray-500">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
                    </div>
                    <Switch
                      checked={settings.desktopNotifications}
                      onCheckedChange={(checked) => updateSetting('desktopNotifications', checked)}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <Label className="text-sm font-medium">Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Label>
                      <p className="text-xs text-gray-500">–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email</p>
                    </div>
                    <Switch
                      checked={settings.emailNotifications}
                      onCheckedChange={(checked) => updateSetting('emailNotifications', checked)}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Privacy & Security Tab */}
          <TabsContent value="privacy" className="space-y-6 animate-in fade-in-0 duration-300">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="w-5 h-5" />
                  –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                </CardTitle>
                <CardDescription>
                  –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å—é –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <Label className="text-sm font-medium">–°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤</Label>
                      <p className="text-xs text-gray-500">–õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏</p>
                    </div>
                    <Switch
                      checked={settings.saveHistory}
                      onCheckedChange={(checked) => updateSetting('saveHistory', checked)}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <Label className="text-sm font-medium">–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</Label>
                      <p className="text-xs text-gray-500">–®–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
                    </div>
                    <Switch
                      checked={settings.encryptData}
                      onCheckedChange={(checked) => updateSetting('encryptData', checked)}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ (–º–∏–Ω—É—Ç—ã)</Label>
                    <Input
                      type="number"
                      value={settings.autoLogout}
                      onChange={(e) => updateSetting('autoLogout', parseInt(e.target.value) || 30)}
                      min={5}
                      max={1440}
                    />
                    <p className="text-xs text-gray-500">
                      –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    </p>
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <h3 className="text-sm font-medium flex items-center gap-2">
                    <Zap className="w-4 h-4" />
                    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                  </h3>
                  
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <Label className="text-sm font-medium">–ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞</Label>
                      <p className="text-xs text-gray-500">–ü–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ –º–µ—Ä–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</p>
                    </div>
                    <Switch
                      checked={settings.streamingEnabled}
                      onCheckedChange={(checked) => updateSetting('streamingEnabled', checked)}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <Label className="text-sm font-medium">–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ</Label>
                      <p className="text-xs text-gray-500">–°–æ—Ö—Ä–∞–Ω—è—Ç—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
                    </div>
                    <Switch
                      checked={settings.cacheEnabled}
                      onCheckedChange={(checked) => updateSetting('cacheEnabled', checked)}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <Label className="text-sm font-medium">–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π</Label>
                      <p className="text-xs text-gray-500">–ó–∞–≥—Ä—É–∂–∞—Ç—å –º–æ–¥–µ–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</p>
                    </div>
                    <Switch
                      checked={settings.preloadModels}
                      onCheckedChange={(checked) => updateSetting('preloadModels', checked)}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </Modal.Body>
      
      <Modal.Footer>
        <div className="flex items-center justify-between w-full">
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={handleReset}>
              <RefreshCw className="w-4 h-4 mr-2" />
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" onClick={handleClose}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleSave} disabled={!hasChanges}>
              <Save className="w-4 h-4 mr-2" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </div>
        </div>
      </Modal.Footer>
    </Modal>
  );
}